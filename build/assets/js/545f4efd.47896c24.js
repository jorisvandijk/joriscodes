"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8642],{6612:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>t,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"software/Git/tips","title":"Tips","description":"This is a collection of Git tips.","source":"@site/docs/software/Git/tips.md","sourceDirName":"software/Git","slug":"/software/Git/tips","permalink":"/software/Git/tips","draft":false,"unlisted":false,"editUrl":"https://codeberg.org/jorisvandijk/joriscodes/src/branch/main/docs/software/Git/tips.md","tags":[{"inline":true,"label":"Git","permalink":"/tags/git"}],"version":"current","lastUpdatedBy":"Joris","lastUpdatedAt":1732356499000,"frontMatter":{"tags":["Git"]},"sidebar":"docsSidebar","previous":{"title":"Switch Git repository from HTTPS to SSH","permalink":"/software/Git/http-to-ssg"}}');var i=s(4848),r=s(8453);const t={tags:["Git"]},l="Tips",c={},o=[{value:"Everyday Git in twenty commands or so",id:"everyday-git-in-twenty-commands-or-so",level:2},{value:"Show helpful guides that come with Git",id:"show-helpful-guides-that-come-with-git",level:2},{value:"Search change by content",id:"search-change-by-content",level:2},{value:"Show changes over time for specific file",id:"show-changes-over-time-for-specific-file",level:2},{value:"Remove sensitive data from history, after a push",id:"remove-sensitive-data-from-history-after-a-push",level:2},{value:"Sync with remote, overwrite local changes",id:"sync-with-remote-overwrite-local-changes",level:2},{value:"List of all files till a commit",id:"list-of-all-files-till-a-commit",level:2},{value:"Git reset first commit",id:"git-reset-first-commit",level:2},{value:"Reset: preserve uncommitted local changes",id:"reset-preserve-uncommitted-local-changes",level:2},{value:"List all the conflicted files",id:"list-all-the-conflicted-files",level:2},{value:"List of all files changed in a commit",id:"list-of-all-files-changed-in-a-commit",level:2},{value:"Unstaged changes since last commit",id:"unstaged-changes-since-last-commit",level:2},{value:"Changes staged for commit",id:"changes-staged-for-commit",level:2},{value:"Show both staged and unstaged changes",id:"show-both-staged-and-unstaged-changes",level:2},{value:"List all branches that are already merged into master",id:"list-all-branches-that-are-already-merged-into-master",level:2},{value:"Quickly switch to the previous branch",id:"quickly-switch-to-the-previous-branch",level:2},{value:"Remove branches that have already been merged with master",id:"remove-branches-that-have-already-been-merged-with-master",level:2},{value:"List all branches and their upstreams, as well as last commit on branch",id:"list-all-branches-and-their-upstreams-as-well-as-last-commit-on-branch",level:2},{value:"Track upstream branch",id:"track-upstream-branch",level:2},{value:"Delete local branch",id:"delete-local-branch",level:2},{value:"Delete remote branch",id:"delete-remote-branch",level:2},{value:"Create local tag",id:"create-local-tag",level:2},{value:"Delete local tag",id:"delete-local-tag",level:2},{value:"Delete remote tag",id:"delete-remote-tag",level:2},{value:"Undo local changes with the content in index(staging)",id:"undo-local-changes-with-the-content-in-indexstaging",level:2},{value:"Revert: Undo a commit by creating a new commit",id:"revert-undo-a-commit-by-creating-a-new-commit",level:2},{value:"Reset: Discard commits, advised for private branch",id:"reset-discard-commits-advised-for-private-branch",level:2},{value:"Reword the previous commit message",id:"reword-the-previous-commit-message",level:2},{value:"See commit history for just the current branch",id:"see-commit-history-for-just-the-current-branch",level:2},{value:"Amend author.",id:"amend-author",level:2},{value:"Reset author, after author has been changed in the global config.",id:"reset-author-after-author-has-been-changed-in-the-global-config",level:2},{value:"Changing a remote&#39;s URL",id:"changing-a-remotes-url",level:2},{value:"Get list of all remote references",id:"get-list-of-all-remote-references",level:2},{value:"Get list of all local and remote branches",id:"get-list-of-all-local-and-remote-branches",level:2},{value:"Get only remote branches",id:"get-only-remote-branches",level:2},{value:"Stage parts of a changed file, instead of the entire file",id:"stage-parts-of-a-changed-file-instead-of-the-entire-file",level:2},{value:"Get git bash completion",id:"get-git-bash-completion",level:2},{value:"What changed since two weeks?",id:"what-changed-since-two-weeks",level:2},{value:"See all commits made since forking from master",id:"see-all-commits-made-since-forking-from-master",level:2},{value:"Pick commits across branches using cherry-pick",id:"pick-commits-across-branches-using-cherry-pick",level:2},{value:"Find out branches containing commit-hash",id:"find-out-branches-containing-commit-hash",level:2},{value:"Git Aliases",id:"git-aliases",level:2},{value:"Saving current state of tracked files without commiting",id:"saving-current-state-of-tracked-files-without-commiting",level:2},{value:"Saving current state of unstaged changes to tracked files",id:"saving-current-state-of-unstaged-changes-to-tracked-files",level:2},{value:"Saving current state including untracked files",id:"saving-current-state-including-untracked-files",level:2},{value:"Saving current state with message",id:"saving-current-state-with-message",level:2},{value:"Saving current state of all files (ignored, untracked, and tracked)",id:"saving-current-state-of-all-files-ignored-untracked-and-tracked",level:2},{value:"Show list of all saved stashes",id:"show-list-of-all-saved-stashes",level:2},{value:"Show the contents of any stash in patch form",id:"show-the-contents-of-any-stash-in-patch-form",level:2},{value:"Apply any stash without deleting from the stashed list",id:"apply-any-stash-without-deleting-from-the-stashed-list",level:2},{value:"Apply last stashed state and delete it from stashed list",id:"apply-last-stashed-state-and-delete-it-from-stashed-list",level:2},{value:"Delete all stored stashes",id:"delete-all-stored-stashes",level:2},{value:"Grab a single file from a stash",id:"grab-a-single-file-from-a-stash",level:2},{value:"Show all tracked files",id:"show-all-tracked-files",level:2},{value:"Show all untracked files",id:"show-all-untracked-files",level:2},{value:"Show all ignored files",id:"show-all-ignored-files",level:2},{value:"Create new working tree from a repository (git 2.5)",id:"create-new-working-tree-from-a-repository-git-25",level:2},{value:"Create new working tree from HEAD state",id:"create-new-working-tree-from-head-state",level:2},{value:"Untrack files without deleting",id:"untrack-files-without-deleting",level:2},{value:"Before deleting untracked files/directory, do a dry run to get the list of these files/directories",id:"before-deleting-untracked-filesdirectory-do-a-dry-run-to-get-the-list-of-these-filesdirectories",level:2},{value:"Forcefully remove untracked files",id:"forcefully-remove-untracked-files",level:2},{value:"Forcefully remove untracked directory",id:"forcefully-remove-untracked-directory",level:2},{value:"Update all the submodules",id:"update-all-the-submodules",level:2},{value:"Show all commits in the current branch yet to be merged to master",id:"show-all-commits-in-the-current-branch-yet-to-be-merged-to-master",level:2},{value:"Rename a branch",id:"rename-a-branch",level:2},{value:"Rebases &#39;feature&#39; to &#39;master&#39; and merges it in to master",id:"rebases-feature-to-master-and-merges-it-in-to-master",level:2},{value:"Archive the <code>master</code> branch",id:"archive-the-master-branch",level:2},{value:"Modify previous commit without modifying the commit message",id:"modify-previous-commit-without-modifying-the-commit-message",level:2},{value:"Prunes references to remove branches that have been deleted in the remote.",id:"prunes-references-to-remove-branches-that-have-been-deleted-in-the-remote",level:2},{value:"Delete local branches that has been squash and merged in the remote.",id:"delete-local-branches-that-has-been-squash-and-merged-in-the-remote",level:2},{value:"Retrieve the commit hash of the initial revision.",id:"retrieve-the-commit-hash-of-the-initial-revision",level:2},{value:"Visualize the version tree.",id:"visualize-the-version-tree",level:2},{value:"Visualize the tree including commits that are only referenced from reflogs",id:"visualize-the-tree-including-commits-that-are-only-referenced-from-reflogs",level:2},{value:"Deploying git tracked subfolder to gh-pages",id:"deploying-git-tracked-subfolder-to-gh-pages",level:2},{value:"Adding a project to repo using subtree",id:"adding-a-project-to-repo-using-subtree",level:2},{value:"Get latest changes in your repo for a linked project using subtree",id:"get-latest-changes-in-your-repo-for-a-linked-project-using-subtree",level:2},{value:"Export a branch with history to a file.",id:"export-a-branch-with-history-to-a-file",level:2},{value:"Import from a bundle",id:"import-from-a-bundle",level:2},{value:"Get the name of current branch.",id:"get-the-name-of-current-branch",level:2},{value:"Ignore one file on commit (e.g. Changelog).",id:"ignore-one-file-on-commit-eg-changelog",level:2},{value:"Stash changes before rebasing",id:"stash-changes-before-rebasing",level:2},{value:"Fetch pull request by ID to a local branch",id:"fetch-pull-request-by-id-to-a-local-branch",level:2},{value:"Show the most recent tag on the current branch.",id:"show-the-most-recent-tag-on-the-current-branch",level:2},{value:"Show inline word diff.",id:"show-inline-word-diff",level:2},{value:"Show changes using common diff tools.",id:"show-changes-using-common-diff-tools",level:2},{value:"Don\u2019t consider changes for tracked file.",id:"dont-consider-changes-for-tracked-file",level:2},{value:"Undo assume-unchanged.",id:"undo-assume-unchanged",level:2},{value:"Clean the files from <code>.gitignore</code>.",id:"clean-the-files-from-gitignore",level:2},{value:"Restore deleted file.",id:"restore-deleted-file",level:2},{value:"Restore file to a specific commit-hash",id:"restore-file-to-a-specific-commit-hash",level:2},{value:"Always rebase instead of merge on pull.",id:"always-rebase-instead-of-merge-on-pull",level:2},{value:"List all the alias and configs.",id:"list-all-the-alias-and-configs",level:2},{value:"Make git case sensitive.",id:"make-git-case-sensitive",level:2},{value:"Add custom editors.",id:"add-custom-editors",level:2},{value:"Auto correct typos.",id:"auto-correct-typos",level:2},{value:"Check if the change was a part of a release.",id:"check-if-the-change-was-a-part-of-a-release",level:2},{value:"Dry run. (any command that supports dry-run flag should do.)",id:"dry-run-any-command-that-supports-dry-run-flag-should-do",level:2},{value:"Marks your commit as a fix of a previous commit.",id:"marks-your-commit-as-a-fix-of-a-previous-commit",level:2},{value:"Squash fixup commits normal commits.",id:"squash-fixup-commits-normal-commits",level:2},{value:"Skip staging area during commit.",id:"skip-staging-area-during-commit",level:2},{value:"Interactive staging.",id:"interactive-staging",level:2},{value:"List ignored files.",id:"list-ignored-files",level:2},{value:"Status of ignored files.",id:"status-of-ignored-files",level:2},{value:"Commits in Branch1 that are not in Branch2",id:"commits-in-branch1-that-are-not-in-branch2",level:2},{value:"List n last commits",id:"list-n-last-commits",level:2},{value:"Reuse recorded resolution, record and reuse previous conflicts resolutions.",id:"reuse-recorded-resolution-record-and-reuse-previous-conflicts-resolutions",level:2},{value:"Open all conflicted files in an editor.",id:"open-all-conflicted-files-in-an-editor",level:2},{value:"Count unpacked number of objects and their disk consumption.",id:"count-unpacked-number-of-objects-and-their-disk-consumption",level:2},{value:"Prune all unreachable objects from the object database.",id:"prune-all-unreachable-objects-from-the-object-database",level:2},{value:"Instantly browse your working repository in gitweb.",id:"instantly-browse-your-working-repository-in-gitweb",level:2},{value:"View the GPG signatures in the commit log",id:"view-the-gpg-signatures-in-the-commit-log",level:2},{value:"Remove entry in the global config.",id:"remove-entry-in-the-global-config",level:2},{value:"Checkout a new branch without any history",id:"checkout-a-new-branch-without-any-history",level:2},{value:"Extract file from another branch.",id:"extract-file-from-another-branch",level:2},{value:"List only the root and merge commits.",id:"list-only-the-root-and-merge-commits",level:2},{value:"Change previous two commits with an interactive rebase.",id:"change-previous-two-commits-with-an-interactive-rebase",level:2},{value:"List all branch is WIP",id:"list-all-branch-is-wip",level:2},{value:"Find guilty with binary search",id:"find-guilty-with-binary-search",level:2},{value:"Bypass pre-commit and commit-msg githooks",id:"bypass-pre-commit-and-commit-msg-githooks",level:2},{value:"List commits and changes to a specific file (even through renaming)",id:"list-commits-and-changes-to-a-specific-file-even-through-renaming",level:2},{value:"Clone a single branch",id:"clone-a-single-branch",level:2},{value:"Create and switch new branch",id:"create-and-switch-new-branch",level:2},{value:"Ignore file mode changes on commits",id:"ignore-file-mode-changes-on-commits",level:2},{value:"Turn off git colored terminal output",id:"turn-off-git-colored-terminal-output",level:2},{value:"Specific color settings",id:"specific-color-settings",level:2},{value:"Show all local branches ordered by recent commits",id:"show-all-local-branches-ordered-by-recent-commits",level:2},{value:"Find lines matching the pattern (regex or string) in tracked files",id:"find-lines-matching-the-pattern-regex-or-string-in-tracked-files",level:2},{value:"Clone a shallow copy of a repository",id:"clone-a-shallow-copy-of-a-repository",level:2},{value:"Search Commit log across all branches for given text",id:"search-commit-log-across-all-branches-for-given-text",level:2},{value:"Get first commit in a branch (from master)",id:"get-first-commit-in-a-branch-from-master",level:2},{value:"Unstaging Staged file",id:"unstaging-staged-file",level:2},{value:"Force push to Remote Repository",id:"force-push-to-remote-repository",level:2},{value:"Adding Remote name",id:"adding-remote-name",level:2},{value:"List all currently configured remotes",id:"list-all-currently-configured-remotes",level:2},{value:"Show the author, time and last revision made to each line of a given file",id:"show-the-author-time-and-last-revision-made-to-each-line-of-a-given-file",level:2},{value:"Group commits by authors and title",id:"group-commits-by-authors-and-title",level:2},{value:"Forced push but still ensure you don&#39;t overwrite other&#39;s work",id:"forced-push-but-still-ensure-you-dont-overwrite-others-work",level:2},{value:"Show how many lines does an author contribute",id:"show-how-many-lines-does-an-author-contribute",level:2},{value:"Revert: Reverting an entire merge",id:"revert-reverting-an-entire-merge",level:2},{value:"Number of commits in a branch",id:"number-of-commits-in-a-branch",level:2},{value:"Alias: git undo",id:"alias-git-undo",level:2},{value:"Add object notes",id:"add-object-notes",level:2},{value:"Show all the git-notes",id:"show-all-the-git-notes",level:2},{value:"Apply commit from another repository",id:"apply-commit-from-another-repository",level:2},{value:"Specific fetch reference",id:"specific-fetch-reference",level:2},{value:"Find common ancestor of two branches",id:"find-common-ancestor-of-two-branches",level:2},{value:"List unpushed git commits",id:"list-unpushed-git-commits",level:2},{value:"Add everything, but whitespace changes",id:"add-everything-but-whitespace-changes",level:2},{value:"Edit [local/global] git config",id:"edit-localglobal-git-config",level:2},{value:"blame on certain range",id:"blame-on-certain-range",level:2},{value:"Show a Git logical variable.",id:"show-a-git-logical-variable",level:2},{value:"Preformatted patch file.",id:"preformatted-patch-file",level:2},{value:"Get the repo name.",id:"get-the-repo-name",level:2},{value:"logs between date range",id:"logs-between-date-range",level:2},{value:"Exclude author from logs",id:"exclude-author-from-logs",level:2},{value:"Generates a summary of pending changes",id:"generates-a-summary-of-pending-changes",level:2},{value:"List references in a remote repository",id:"list-references-in-a-remote-repository",level:2},{value:"Backup untracked files.",id:"backup-untracked-files",level:2},{value:"List all git aliases",id:"list-all-git-aliases",level:2},{value:"Show git status short",id:"show-git-status-short",level:2},{value:"Checkout a commit prior to a day ago",id:"checkout-a-commit-prior-to-a-day-ago",level:2},{value:"Push the current branch to the same name on the remote repository",id:"push-the-current-branch-to-the-same-name-on-the-remote-repository",level:2},{value:"Push a new local branch to remote repository and track",id:"push-a-new-local-branch-to-remote-repository-and-track",level:2},{value:"Change a branch base",id:"change-a-branch-base",level:2},{value:"Use SSH instead of HTTPs for remotes",id:"use-ssh-instead-of-https-for-remotes",level:2},{value:"Update a submodule to the latest commit",id:"update-a-submodule-to-the-latest-commit",level:2},{value:"Prevent auto replacing LF with CRLF",id:"prevent-auto-replacing-lf-with-crlf",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"tips",children:"Tips"})}),"\n",(0,i.jsx)(n.p,{children:"This is a collection of Git tips."}),"\n",(0,i.jsxs)(n.p,{children:["All these commands are tested on ",(0,i.jsx)(n.code,{children:"git version 2.7.4"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"everyday-git-in-twenty-commands-or-so",children:"Everyday Git in twenty commands or so"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git help everyday\n"})}),"\n",(0,i.jsx)(n.h2,{id:"show-helpful-guides-that-come-with-git",children:"Show helpful guides that come with Git"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git help -g\n"})}),"\n",(0,i.jsx)(n.h2,{id:"search-change-by-content",children:"Search change by content"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git log -S'<a term in the source>'\n"})}),"\n",(0,i.jsx)(n.h2,{id:"show-changes-over-time-for-specific-file",children:"Show changes over time for specific file"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git log -p <file_name>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"remove-sensitive-data-from-history-after-a-push",children:"Remove sensitive data from history, after a push"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch <path-to-your-file>' --prune-empty --tag-name-filter cat -- --all && git push origin --force --all\n"})}),"\n",(0,i.jsx)(n.h2,{id:"sync-with-remote-overwrite-local-changes",children:"Sync with remote, overwrite local changes"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git fetch origin && git reset --hard origin/master && git clean -f -d\n"})}),"\n",(0,i.jsx)(n.h2,{id:"list-of-all-files-till-a-commit",children:"List of all files till a commit"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git ls-tree --name-only -r <commit-ish>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"git-reset-first-commit",children:"Git reset first commit"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git update-ref -d HEAD\n"})}),"\n",(0,i.jsx)(n.h2,{id:"reset-preserve-uncommitted-local-changes",children:"Reset: preserve uncommitted local changes"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git reset --keep <commit>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"list-all-the-conflicted-files",children:"List all the conflicted files"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git diff --name-only --diff-filter=U\n"})}),"\n",(0,i.jsx)(n.h2,{id:"list-of-all-files-changed-in-a-commit",children:"List of all files changed in a commit"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git diff-tree --no-commit-id --name-only -r <commit-ish>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"unstaged-changes-since-last-commit",children:"Unstaged changes since last commit"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git diff\n"})}),"\n",(0,i.jsx)(n.h2,{id:"changes-staged-for-commit",children:"Changes staged for commit"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git diff --cached\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Alternatives:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git diff --staged\n"})}),"\n",(0,i.jsx)(n.h2,{id:"show-both-staged-and-unstaged-changes",children:"Show both staged and unstaged changes"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git diff HEAD\n"})}),"\n",(0,i.jsx)(n.h2,{id:"list-all-branches-that-are-already-merged-into-master",children:"List all branches that are already merged into master"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git branch --merged master\n"})}),"\n",(0,i.jsx)(n.h2,{id:"quickly-switch-to-the-previous-branch",children:"Quickly switch to the previous branch"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git checkout -\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Alternatives:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git checkout @{-1}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"remove-branches-that-have-already-been-merged-with-master",children:"Remove branches that have already been merged with master"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git branch --merged master | grep -v '^\\*' | xargs -n 1 git branch -d\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Alternatives:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git branch --merged master | grep -v '^\\*\\|  master' | xargs -n 1 git branch -d # will not delete master if master is not checked out\n"})}),"\n",(0,i.jsx)(n.h2,{id:"list-all-branches-and-their-upstreams-as-well-as-last-commit-on-branch",children:"List all branches and their upstreams, as well as last commit on branch"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git branch -vv\n"})}),"\n",(0,i.jsx)(n.h2,{id:"track-upstream-branch",children:"Track upstream branch"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git branch -u origin/mybranch\n"})}),"\n",(0,i.jsx)(n.h2,{id:"delete-local-branch",children:"Delete local branch"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git branch -d <local_branchname>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"delete-remote-branch",children:"Delete remote branch"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git push origin --delete <remote_branchname>\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Alternatives:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git push origin :<remote_branchname>\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git branch -dr <remote/branch>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"create-local-tag",children:"Create local tag"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git tag <tag-name>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"delete-local-tag",children:"Delete local tag"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git tag -d <tag-name>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"delete-remote-tag",children:"Delete remote tag"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git push origin :refs/tags/<tag-name>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"undo-local-changes-with-the-content-in-indexstaging",children:"Undo local changes with the content in index(staging)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git checkout -- <file_name>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"revert-undo-a-commit-by-creating-a-new-commit",children:"Revert: Undo a commit by creating a new commit"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git revert <commit-ish>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"reset-discard-commits-advised-for-private-branch",children:"Reset: Discard commits, advised for private branch"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git reset <commit-ish>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"reword-the-previous-commit-message",children:"Reword the previous commit message"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git commit -v --amend\n"})}),"\n",(0,i.jsx)(n.h2,{id:"see-commit-history-for-just-the-current-branch",children:"See commit history for just the current branch"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git cherry -v master\n"})}),"\n",(0,i.jsx)(n.h2,{id:"amend-author",children:"Amend author."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git commit --amend --author='Author Name <email@address.com>'\n"})}),"\n",(0,i.jsx)(n.h2,{id:"reset-author-after-author-has-been-changed-in-the-global-config",children:"Reset author, after author has been changed in the global config."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git commit --amend --reset-author --no-edit\n"})}),"\n",(0,i.jsx)(n.h2,{id:"changing-a-remotes-url",children:"Changing a remote's URL"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git remote set-url origin <URL>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"get-list-of-all-remote-references",children:"Get list of all remote references"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git remote\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Alternatives:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git remote show\n"})}),"\n",(0,i.jsx)(n.h2,{id:"get-list-of-all-local-and-remote-branches",children:"Get list of all local and remote branches"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git branch -a\n"})}),"\n",(0,i.jsx)(n.h2,{id:"get-only-remote-branches",children:"Get only remote branches"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git branch -r\n"})}),"\n",(0,i.jsx)(n.h2,{id:"stage-parts-of-a-changed-file-instead-of-the-entire-file",children:"Stage parts of a changed file, instead of the entire file"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git add -p\n"})}),"\n",(0,i.jsx)(n.h2,{id:"get-git-bash-completion",children:"Get git bash completion"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"curl -L http://git.io/vfhol > ~/.git-completion.bash && echo '[ -f ~/.git-completion.bash ] && . ~/.git-completion.bash' >> ~/.bashrc\n"})}),"\n",(0,i.jsx)(n.h2,{id:"what-changed-since-two-weeks",children:"What changed since two weeks?"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git log --no-merges --raw --since='2 weeks ago'\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Alternatives:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git whatchanged --since='2 weeks ago'\n"})}),"\n",(0,i.jsx)(n.h2,{id:"see-all-commits-made-since-forking-from-master",children:"See all commits made since forking from master"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git log --no-merges --stat --reverse master..\n"})}),"\n",(0,i.jsx)(n.h2,{id:"pick-commits-across-branches-using-cherry-pick",children:"Pick commits across branches using cherry-pick"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git checkout <branch-name> && git cherry-pick <commit-ish>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"find-out-branches-containing-commit-hash",children:"Find out branches containing commit-hash"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git branch -a --contains <commit-ish>\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Alternatives:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git branch --contains <commit-ish>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"git-aliases",children:"Git Aliases"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git config --global alias.<handle> <command> \ngit config --global alias.st status\n"})}),"\n",(0,i.jsx)(n.h2,{id:"saving-current-state-of-tracked-files-without-commiting",children:"Saving current state of tracked files without commiting"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git stash\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Alternatives:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git stash push\n"})}),"\n",(0,i.jsx)(n.h2,{id:"saving-current-state-of-unstaged-changes-to-tracked-files",children:"Saving current state of unstaged changes to tracked files"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git stash -k\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Alternatives:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git stash --keep-index\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git stash push --keep-index\n"})}),"\n",(0,i.jsx)(n.h2,{id:"saving-current-state-including-untracked-files",children:"Saving current state including untracked files"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git stash -u\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Alternatives:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git stash push -u\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git stash push --include-untracked\n"})}),"\n",(0,i.jsx)(n.h2,{id:"saving-current-state-with-message",children:"Saving current state with message"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git stash push -m <message>\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Alternatives:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git stash push --message <message>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"saving-current-state-of-all-files-ignored-untracked-and-tracked",children:"Saving current state of all files (ignored, untracked, and tracked)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git stash -a\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Alternatives:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git stash --all\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git stash push --all\n"})}),"\n",(0,i.jsx)(n.h2,{id:"show-list-of-all-saved-stashes",children:"Show list of all saved stashes"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git stash list\n"})}),"\n",(0,i.jsx)(n.h2,{id:"show-the-contents-of-any-stash-in-patch-form",children:"Show the contents of any stash in patch form"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git stash show -p <stash@{n}>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"apply-any-stash-without-deleting-from-the-stashed-list",children:"Apply any stash without deleting from the stashed list"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git stash apply <stash@{n}>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"apply-last-stashed-state-and-delete-it-from-stashed-list",children:"Apply last stashed state and delete it from stashed list"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git stash pop\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Alternatives:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git stash apply stash@{0} && git stash drop stash@{0}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"delete-all-stored-stashes",children:"Delete all stored stashes"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git stash clear\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Alternatives:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git stash drop <stash@{n}>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"grab-a-single-file-from-a-stash",children:"Grab a single file from a stash"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git checkout <stash@{n}> -- <file_path>\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Alternatives:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git checkout stash@{0} -- <file_path>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"show-all-tracked-files",children:"Show all tracked files"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git ls-files -t\n"})}),"\n",(0,i.jsx)(n.h2,{id:"show-all-untracked-files",children:"Show all untracked files"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git ls-files --others\n"})}),"\n",(0,i.jsx)(n.h2,{id:"show-all-ignored-files",children:"Show all ignored files"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git ls-files --others -i --exclude-standard\n"})}),"\n",(0,i.jsx)(n.h2,{id:"create-new-working-tree-from-a-repository-git-25",children:"Create new working tree from a repository (git 2.5)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git worktree add -b <branch-name> <path> <start-point>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"create-new-working-tree-from-head-state",children:"Create new working tree from HEAD state"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git worktree add --detach <path> HEAD\n"})}),"\n",(0,i.jsx)(n.h2,{id:"untrack-files-without-deleting",children:"Untrack files without deleting"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git rm --cached <file_path>\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Alternatives:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git rm --cached -r <directory_path>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"before-deleting-untracked-filesdirectory-do-a-dry-run-to-get-the-list-of-these-filesdirectories",children:"Before deleting untracked files/directory, do a dry run to get the list of these files/directories"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git clean -n\n"})}),"\n",(0,i.jsx)(n.h2,{id:"forcefully-remove-untracked-files",children:"Forcefully remove untracked files"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git clean -f\n"})}),"\n",(0,i.jsx)(n.h2,{id:"forcefully-remove-untracked-directory",children:"Forcefully remove untracked directory"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git clean -f -d\n"})}),"\n",(0,i.jsx)(n.h2,{id:"update-all-the-submodules",children:"Update all the submodules"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git submodule foreach git pull\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Alternatives:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git submodule update --init --recursive\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git submodule update --remote\n"})}),"\n",(0,i.jsx)(n.h2,{id:"show-all-commits-in-the-current-branch-yet-to-be-merged-to-master",children:"Show all commits in the current branch yet to be merged to master"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git cherry -v master\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Alternatives:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git cherry -v master <branch-to-be-merged>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"rename-a-branch",children:"Rename a branch"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git branch -m <new-branch-name>\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Alternatives:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git branch -m [<old-branch-name>] <new-branch-name>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"rebases-feature-to-master-and-merges-it-in-to-master",children:"Rebases 'feature' to 'master' and merges it in to master"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git rebase master feature && git checkout master && git merge -\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"archive-the-master-branch",children:["Archive the ",(0,i.jsx)(n.code,{children:"master"})," branch"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git archive master --format=zip --output=master.zip\n"})}),"\n",(0,i.jsx)(n.h2,{id:"modify-previous-commit-without-modifying-the-commit-message",children:"Modify previous commit without modifying the commit message"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git add --all && git commit --amend --no-edit\n"})}),"\n",(0,i.jsx)(n.h2,{id:"prunes-references-to-remove-branches-that-have-been-deleted-in-the-remote",children:"Prunes references to remove branches that have been deleted in the remote."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git fetch -p\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Alternatives:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git remote prune origin\n"})}),"\n",(0,i.jsx)(n.h2,{id:"delete-local-branches-that-has-been-squash-and-merged-in-the-remote",children:"Delete local branches that has been squash and merged in the remote."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git branch -vv | grep ': gone]' | awk '{print \x3c!-- @doxie.inject start --\x3e}' | xargs git branch -D\n"})}),"\n",(0,i.jsx)(n.h2,{id:"retrieve-the-commit-hash-of-the-initial-revision",children:"Retrieve the commit hash of the initial revision."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:" git rev-list --reverse HEAD | head -1\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Alternatives:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git rev-list --max-parents=0 HEAD\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git log --pretty=oneline | tail -1 | cut -c 1-40\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git log --pretty=oneline --reverse | head -1 | cut -c 1-40\n"})}),"\n",(0,i.jsx)(n.h2,{id:"visualize-the-version-tree",children:"Visualize the version tree."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git log --pretty=oneline --graph --decorate --all\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Alternatives:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"gitk --all\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git log --graph --pretty=format:'%C(auto) %h | %s | %an | %ar%d'\n"})}),"\n",(0,i.jsx)(n.h2,{id:"visualize-the-tree-including-commits-that-are-only-referenced-from-reflogs",children:"Visualize the tree including commits that are only referenced from reflogs"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git log --graph --decorate --oneline $(git rev-list --walk-reflogs --all)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"deploying-git-tracked-subfolder-to-gh-pages",children:"Deploying git tracked subfolder to gh-pages"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git subtree push --prefix subfolder_name origin gh-pages\n"})}),"\n",(0,i.jsx)(n.h2,{id:"adding-a-project-to-repo-using-subtree",children:"Adding a project to repo using subtree"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git subtree add --prefix=<directory_name>/<project_name> --squash git@github.com:<username>/<project_name>.git master\n"})}),"\n",(0,i.jsx)(n.h2,{id:"get-latest-changes-in-your-repo-for-a-linked-project-using-subtree",children:"Get latest changes in your repo for a linked project using subtree"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git subtree pull --prefix=<directory_name>/<project_name> --squash git@github.com:<username>/<project_name>.git master\n"})}),"\n",(0,i.jsx)(n.h2,{id:"export-a-branch-with-history-to-a-file",children:"Export a branch with history to a file."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git bundle create <file> <branch-name>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"import-from-a-bundle",children:"Import from a bundle"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git clone repo.bundle <repo-dir> -b <branch-name>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"get-the-name-of-current-branch",children:"Get the name of current branch."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git rev-parse --abbrev-ref HEAD\n"})}),"\n",(0,i.jsx)(n.h2,{id:"ignore-one-file-on-commit-eg-changelog",children:"Ignore one file on commit (e.g. Changelog)."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git update-index --assume-unchanged Changelog; git commit -a; git update-index --no-assume-unchanged Changelog\n"})}),"\n",(0,i.jsx)(n.h2,{id:"stash-changes-before-rebasing",children:"Stash changes before rebasing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git rebase --autostash\n"})}),"\n",(0,i.jsx)(n.h2,{id:"fetch-pull-request-by-id-to-a-local-branch",children:"Fetch pull request by ID to a local branch"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git fetch origin pull/<id>/head:<branch-name>\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Alternatives:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git pull origin pull/<id>/head:<branch-name>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"show-the-most-recent-tag-on-the-current-branch",children:"Show the most recent tag on the current branch."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git describe --tags --abbrev=0\n"})}),"\n",(0,i.jsx)(n.h2,{id:"show-inline-word-diff",children:"Show inline word diff."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git diff --word-diff\n"})}),"\n",(0,i.jsx)(n.h2,{id:"show-changes-using-common-diff-tools",children:"Show changes using common diff tools."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git difftool [-t <tool>] <commit1> <commit2> <path>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"dont-consider-changes-for-tracked-file",children:"Don\u2019t consider changes for tracked file."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git update-index --assume-unchanged <file_name>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"undo-assume-unchanged",children:"Undo assume-unchanged."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git update-index --no-assume-unchanged <file_name>\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"clean-the-files-from-gitignore",children:["Clean the files from ",(0,i.jsx)(n.code,{children:".gitignore"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git clean -X -f\n"})}),"\n",(0,i.jsx)(n.h2,{id:"restore-deleted-file",children:"Restore deleted file."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git checkout <deleting_commit> -- <file_path>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"restore-file-to-a-specific-commit-hash",children:"Restore file to a specific commit-hash"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git checkout <commit-ish> -- <file_path>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"always-rebase-instead-of-merge-on-pull",children:"Always rebase instead of merge on pull."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git config --global pull.rebase true\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Alternatives:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"#git < 1.7.9\ngit config --global branch.autosetuprebase always\n"})}),"\n",(0,i.jsx)(n.h2,{id:"list-all-the-alias-and-configs",children:"List all the alias and configs."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git config --list\n"})}),"\n",(0,i.jsx)(n.h2,{id:"make-git-case-sensitive",children:"Make git case sensitive."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git config --global core.ignorecase false\n"})}),"\n",(0,i.jsx)(n.h2,{id:"add-custom-editors",children:"Add custom editors."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git config --global core.editor '$EDITOR'\n"})}),"\n",(0,i.jsx)(n.h2,{id:"auto-correct-typos",children:"Auto correct typos."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git config --global help.autocorrect 1\n"})}),"\n",(0,i.jsx)(n.h2,{id:"check-if-the-change-was-a-part-of-a-release",children:"Check if the change was a part of a release."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git name-rev --name-only <SHA-1>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"dry-run-any-command-that-supports-dry-run-flag-should-do",children:"Dry run. (any command that supports dry-run flag should do.)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git clean -fd --dry-run\n"})}),"\n",(0,i.jsx)(n.h2,{id:"marks-your-commit-as-a-fix-of-a-previous-commit",children:"Marks your commit as a fix of a previous commit."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git commit --fixup <SHA-1>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"squash-fixup-commits-normal-commits",children:"Squash fixup commits normal commits."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git rebase -i --autosquash\n"})}),"\n",(0,i.jsx)(n.h2,{id:"skip-staging-area-during-commit",children:"Skip staging area during commit."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git commit --only <file_path>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"interactive-staging",children:"Interactive staging."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git add -i\n"})}),"\n",(0,i.jsx)(n.h2,{id:"list-ignored-files",children:"List ignored files."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git check-ignore *\n"})}),"\n",(0,i.jsx)(n.h2,{id:"status-of-ignored-files",children:"Status of ignored files."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git status --ignored\n"})}),"\n",(0,i.jsx)(n.h2,{id:"commits-in-branch1-that-are-not-in-branch2",children:"Commits in Branch1 that are not in Branch2"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git log Branch1 ^Branch2\n"})}),"\n",(0,i.jsx)(n.h2,{id:"list-n-last-commits",children:"List n last commits"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git log -<n>\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Alternatives:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git log -n <n>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"reuse-recorded-resolution-record-and-reuse-previous-conflicts-resolutions",children:"Reuse recorded resolution, record and reuse previous conflicts resolutions."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git config --global rerere.enabled 1\n"})}),"\n",(0,i.jsx)(n.h2,{id:"open-all-conflicted-files-in-an-editor",children:"Open all conflicted files in an editor."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git diff --name-only | uniq | xargs $EDITOR\n"})}),"\n",(0,i.jsx)(n.h2,{id:"count-unpacked-number-of-objects-and-their-disk-consumption",children:"Count unpacked number of objects and their disk consumption."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git count-objects --human-readable\n"})}),"\n",(0,i.jsx)(n.h2,{id:"prune-all-unreachable-objects-from-the-object-database",children:"Prune all unreachable objects from the object database."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git gc --prune=now --aggressive\n"})}),"\n",(0,i.jsx)(n.h2,{id:"instantly-browse-your-working-repository-in-gitweb",children:"Instantly browse your working repository in gitweb."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git instaweb [--local] [--httpd=<httpd>] [--port=<port>] [--browser=<browser>]\n"})}),"\n",(0,i.jsx)(n.h2,{id:"view-the-gpg-signatures-in-the-commit-log",children:"View the GPG signatures in the commit log"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git log --show-signature\n"})}),"\n",(0,i.jsx)(n.h2,{id:"remove-entry-in-the-global-config",children:"Remove entry in the global config."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git config --global --unset <entry-name>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"checkout-a-new-branch-without-any-history",children:"Checkout a new branch without any history"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git checkout --orphan <branch_name>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"extract-file-from-another-branch",children:"Extract file from another branch."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git show <branch_name>:<file_name>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"list-only-the-root-and-merge-commits",children:"List only the root and merge commits."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git log --first-parent\n"})}),"\n",(0,i.jsx)(n.h2,{id:"change-previous-two-commits-with-an-interactive-rebase",children:"Change previous two commits with an interactive rebase."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git rebase --interactive HEAD~2\n"})}),"\n",(0,i.jsx)(n.h2,{id:"list-all-branch-is-wip",children:"List all branch is WIP"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git checkout master && git branch --no-merged\n"})}),"\n",(0,i.jsx)(n.h2,{id:"find-guilty-with-binary-search",children:"Find guilty with binary search"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git bisect start                    # Search start \ngit bisect bad                      # Set point to bad commit \ngit bisect good v2.6.13-rc2         # Set point to good commit|tag \ngit bisect bad                      # Say current state is bad \ngit bisect good                     # Say current state is good \ngit bisect reset                    # Finish search \n\n"})}),"\n",(0,i.jsx)(n.h2,{id:"bypass-pre-commit-and-commit-msg-githooks",children:"Bypass pre-commit and commit-msg githooks"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git commit --no-verify\n"})}),"\n",(0,i.jsx)(n.h2,{id:"list-commits-and-changes-to-a-specific-file-even-through-renaming",children:"List commits and changes to a specific file (even through renaming)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git log --follow -p -- <file_path>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"clone-a-single-branch",children:"Clone a single branch"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git clone -b <branch-name> --single-branch https://github.com/user/repo.git\n"})}),"\n",(0,i.jsx)(n.h2,{id:"create-and-switch-new-branch",children:"Create and switch new branch"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git checkout -b <branch-name>\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Alternatives:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git branch <branch-name> && git checkout <branch-name>\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git switch -c <branch-name>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"ignore-file-mode-changes-on-commits",children:"Ignore file mode changes on commits"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git config core.fileMode false\n"})}),"\n",(0,i.jsx)(n.h2,{id:"turn-off-git-colored-terminal-output",children:"Turn off git colored terminal output"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git config --global color.ui false\n"})}),"\n",(0,i.jsx)(n.h2,{id:"specific-color-settings",children:"Specific color settings"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git config --global <specific command e.g branch, diff> <true, false or always>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"show-all-local-branches-ordered-by-recent-commits",children:"Show all local branches ordered by recent commits"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git for-each-ref --sort=-committerdate --format='%(refname:short)' refs/heads/\n"})}),"\n",(0,i.jsx)(n.h2,{id:"find-lines-matching-the-pattern-regex-or-string-in-tracked-files",children:"Find lines matching the pattern (regex or string) in tracked files"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git grep --heading --line-number 'foo bar'\n"})}),"\n",(0,i.jsx)(n.h2,{id:"clone-a-shallow-copy-of-a-repository",children:"Clone a shallow copy of a repository"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git clone https://github.com/user/repo.git --depth 1\n"})}),"\n",(0,i.jsx)(n.h2,{id:"search-commit-log-across-all-branches-for-given-text",children:"Search Commit log across all branches for given text"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git log --all --grep='<given-text>'\n"})}),"\n",(0,i.jsx)(n.h2,{id:"get-first-commit-in-a-branch-from-master",children:"Get first commit in a branch (from master)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git log --oneline master..<branch-name> | tail -1\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Alternatives:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git log --reverse master..<branch-name> | head -6\n"})}),"\n",(0,i.jsx)(n.h2,{id:"unstaging-staged-file",children:"Unstaging Staged file"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git reset HEAD <file-name>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"force-push-to-remote-repository",children:"Force push to Remote Repository"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git push -f <remote-name> <branch-name>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"adding-remote-name",children:"Adding Remote name"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git remote add <remote-nickname> <remote-url>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"list-all-currently-configured-remotes",children:"List all currently configured remotes"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git remote -v\n"})}),"\n",(0,i.jsx)(n.h2,{id:"show-the-author-time-and-last-revision-made-to-each-line-of-a-given-file",children:"Show the author, time and last revision made to each line of a given file"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git blame <file-name>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"group-commits-by-authors-and-title",children:"Group commits by authors and title"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git shortlog\n"})}),"\n",(0,i.jsx)(n.h2,{id:"forced-push-but-still-ensure-you-dont-overwrite-others-work",children:"Forced push but still ensure you don't overwrite other's work"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git push --force-with-lease <remote-name> <branch-name>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"show-how-many-lines-does-an-author-contribute",children:"Show how many lines does an author contribute"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git log --author='_Your_Name_Here_' --pretty=tformat: --numstat | gawk '{ add += \x3c!-- @doxie.inject start --\x3e; subs += \x3c!-- @doxie.inject end --\x3e; loc += \x3c!-- @doxie.inject start --\x3e - \x3c!-- @doxie.inject end --\x3e } END { printf \"added lines: %s removed lines: %s total lines: %s\n\", add, subs, loc }' -\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Alternatives:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git log --author='_Your_Name_Here_' --pretty=tformat: --numstat | awk '{ add += \x3c!-- @doxie.inject start --\x3e; subs += \x3c!-- @doxie.inject end --\x3e; loc += \x3c!-- @doxie.inject start --\x3e - \x3c!-- @doxie.inject end --\x3e } END { printf \"added lines: %s, removed lines: %s, total lines: %s\n\", add, subs, loc }' - # on Mac OSX\n"})}),"\n",(0,i.jsx)(n.h2,{id:"revert-reverting-an-entire-merge",children:"Revert: Reverting an entire merge"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git revert -m 1 <commit-ish>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"number-of-commits-in-a-branch",children:"Number of commits in a branch"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git rev-list --count <branch-name>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"alias-git-undo",children:"Alias: git undo"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git config --global alias.undo '!f() { git reset --hard $(git rev-parse --abbrev-ref HEAD)@{${1-1}}; }; f'\n"})}),"\n",(0,i.jsx)(n.h2,{id:"add-object-notes",children:"Add object notes"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git notes add -m 'Note on the previous commit....'\n"})}),"\n",(0,i.jsx)(n.h2,{id:"show-all-the-git-notes",children:"Show all the git-notes"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git log --show-notes='*'\n"})}),"\n",(0,i.jsx)(n.h2,{id:"apply-commit-from-another-repository",children:"Apply commit from another repository"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git --git-dir=<source-dir>/.git format-patch -k -1 --stdout <SHA1> | git am -3 -k\n"})}),"\n",(0,i.jsx)(n.h2,{id:"specific-fetch-reference",children:"Specific fetch reference"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git fetch origin master:refs/remotes/origin/mymaster\n"})}),"\n",(0,i.jsx)(n.h2,{id:"find-common-ancestor-of-two-branches",children:"Find common ancestor of two branches"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git merge-base <branch-name> <other-branch-name>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"list-unpushed-git-commits",children:"List unpushed git commits"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git log --branches --not --remotes\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Alternatives:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git log @{u}..\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git cherry -v\n"})}),"\n",(0,i.jsx)(n.h2,{id:"add-everything-but-whitespace-changes",children:"Add everything, but whitespace changes"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git diff --ignore-all-space | git apply --cached\n"})}),"\n",(0,i.jsx)(n.h2,{id:"edit-localglobal-git-config",children:"Edit [local/global] git config"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git config [--global] --edit\n"})}),"\n",(0,i.jsx)(n.h2,{id:"blame-on-certain-range",children:"blame on certain range"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git blame -L <start>,<end>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"show-a-git-logical-variable",children:"Show a Git logical variable."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git var -l | <variable>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"preformatted-patch-file",children:"Preformatted patch file."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git format-patch -M upstream..topic\n"})}),"\n",(0,i.jsx)(n.h2,{id:"get-the-repo-name",children:"Get the repo name."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git rev-parse --show-toplevel\n"})}),"\n",(0,i.jsx)(n.h2,{id:"logs-between-date-range",children:"logs between date range"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git log --since='FEB 1 2017' --until='FEB 14 2017'\n"})}),"\n",(0,i.jsx)(n.h2,{id:"exclude-author-from-logs",children:"Exclude author from logs"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git log --perl-regexp --author='^((?!excluded-author-regex).*)\n\n"})}),"\n",(0,i.jsx)(n.h2,{id:"generates-a-summary-of-pending-changes",children:"Generates a summary of pending changes"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git request-pull v1.0 https://git.ko.xz/project master:for-linus\n"})}),"\n",(0,i.jsx)(n.h2,{id:"list-references-in-a-remote-repository",children:"List references in a remote repository"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git ls-remote git://git.kernel.org/pub/scm/git/git.git\n"})}),"\n",(0,i.jsx)(n.h2,{id:"backup-untracked-files",children:"Backup untracked files."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git ls-files --others -i --exclude-standard | xargs zip untracked.zip\n"})}),"\n",(0,i.jsx)(n.h2,{id:"list-all-git-aliases",children:"List all git aliases"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git config -l | grep alias | sed 's/^alias\\.//g'\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Alternatives:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git config -l | grep alias | cut -d '.' -f 2\n"})}),"\n",(0,i.jsx)(n.h2,{id:"show-git-status-short",children:"Show git status short"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git status --short --branch\n"})}),"\n",(0,i.jsx)(n.h2,{id:"checkout-a-commit-prior-to-a-day-ago",children:"Checkout a commit prior to a day ago"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git checkout master@{yesterday}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"push-the-current-branch-to-the-same-name-on-the-remote-repository",children:"Push the current branch to the same name on the remote repository"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git push origin HEAD\n"})}),"\n",(0,i.jsx)(n.h2,{id:"push-a-new-local-branch-to-remote-repository-and-track",children:"Push a new local branch to remote repository and track"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git push -u origin <branch_name>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"change-a-branch-base",children:"Change a branch base"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git rebase --onto <new_base> <old_base>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"use-ssh-instead-of-https-for-remotes",children:"Use SSH instead of HTTPs for remotes"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git config --global url.'git@github.com:'.insteadOf 'https://github.com/'\n"})}),"\n",(0,i.jsx)(n.h2,{id:"update-a-submodule-to-the-latest-commit",children:"Update a submodule to the latest commit"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:'cd <path-to-submodule>\ngit pull origin <branch>\ncd <root-of-your-main-project>\ngit add <path-to-submodule>\ngit commit -m "submodule updated"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"prevent-auto-replacing-lf-with-crlf",children:"Prevent auto replacing LF with CRLF"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git config --global core.autocrlf false\n"})}),"\n",(0,i.jsx)(n.h1,{id:"license-copyright-and-source",children:"License, Copyright and Source"}),"\n",(0,i.jsxs)(n.p,{children:["These tips were aggregated by ",(0,i.jsx)(n.a,{href:"mailto:hemanth.hm@gmail.com",children:"Hemanth.HM"})," at ",(0,i.jsx)(n.a,{href:"https://github.com/git-tips/",children:"GitHub"})," and distributed under the ",(0,i.jsx)(n.a,{href:"https://opensource.org/licenses/MIT",children:"MIT License"}),"."]})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>l});var a=s(6540);const i={},r=a.createContext(i);function t(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);